version: '3.8'

services:
  # PostgreSQL Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§
  postgres:
    image: postgres:15-alpine
    container_name: behindy-postgres
    environment:
      POSTGRES_DB: behindy_db
      POSTGRES_USER: ${DB_USERNAME:-behindy_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-behindy_pass}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - behindy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-behindy_user} -d behindy_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Ï∫êÏãú
  redis:
    image: redis:7-alpine
    container_name: behindy-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - behindy-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Spring Boot Î∞±ÏóîÎìú
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: behindy-backend
    ports:
      - "8080:8080"
    environment:
      # ÌôòÍ≤Ω ÏÑ§Ï†ï
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-development}
      
      # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ§Ï†ï
      DB_USERNAME: ${DB_USERNAME:-behindy_user}
      DB_PASSWORD: ${DB_PASSWORD:-behindy_pass}
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/behindy_db
      
      # Redis ÏÑ§Ï†ï
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      
      # üîë JWT Î≥¥Ïïà ÏÑ§Ï†ï
      JWT_SECRET: ${JWT_SECRET:-behindy-dev-secret-key-change-in-production-min-256-bits}
      JWT_ACCESS_VALIDITY: ${JWT_ACCESS_VALIDITY:-900000}
      JWT_REFRESH_VALIDITY: ${JWT_REFRESH_VALIDITY:-604800000}
      
      # üç™ Ïø†ÌÇ§ Î≥¥Ïïà ÏÑ§Ï†ï
      COOKIE_SECURE: ${COOKIE_SECURE:-false}
      COOKIE_SAME_SITE: ${COOKIE_SAME_SITE:-strict}
      
      # Ïô∏Î∂Ä API
      SEOUL_API_KEY: ${SEOUL_API_KEY:-sample}
      
      # Î°úÍπÖ
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SECURITY_LOG_LEVEL: ${SECURITY_LOG_LEVEL:-WARN}
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - behindy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Next.js ÌîÑÎ°†Ìä∏ÏóîÎìú
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        # API URL ÏÑ§Ï†ï
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8080/api}
        NEXT_PUBLIC_AI_URL: ${NEXT_PUBLIC_AI_URL:-http://localhost:8000}
        
        # Í∞úÎ∞úÌôòÍ≤Ω ÏÑ§Ï†ï
        NEXT_PUBLIC_DEV_MODE: ${NEXT_PUBLIC_DEV_MODE:-true}
        NEXT_PUBLIC_LOG_LEVEL: ${NEXT_PUBLIC_LOG_LEVEL:-INFO}
        
        # ÌÜ†ÌÅ∞ ÌÇ§ ÏÑ§Ï†ï
        NEXT_PUBLIC_TOKEN_KEY: ${NEXT_PUBLIC_TOKEN_KEY:-behindy_access_token}
        
        # Ïï± Ï†ïÎ≥¥
        NEXT_PUBLIC_APP_NAME: ${NEXT_PUBLIC_APP_NAME:-Behindy}
        NEXT_PUBLIC_APP_VERSION: ${NEXT_PUBLIC_APP_VERSION:-1.0.0}
        
    container_name: behindy-frontend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      
    depends_on:
      - backend
    networks:
      - behindy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  aiserver:
    build:
      context: ./aiserver
      dockerfile: Dockerfile
    container_name: behindy-aiserver
    ports:
      - "8000:8000"
    networks:
      - behindy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: behindy-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
      aiserver:
        condition: service_healthy
    networks:
      - behindy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  behindy-network:
    driver: bridge