name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Cleanup and checkout
        run: |
          echo "🧹 정리 및 코드 동기화..."
          docker system prune -f
          cd ~/behindy
          git fetch origin
          git reset --hard origin/main

      - name: Smart rebuild
        run: |
          cd ~/behindy
          echo "🔍 변경사항 분석 중..."
          
          # 변경된 서비스만 리빌드
          CHANGED_FILES=$(git diff HEAD~1 --name-only)
          
          docker-compose down --timeout 10
          
          if echo "$CHANGED_FILES" | grep -q "backend/"; then
            echo "📦 백엔드 리빌드..."
            docker-compose build backend
          fi
          
          if echo "$CHANGED_FILES" | grep -q "frontend/"; then
            echo "📦 프론트엔드 리빌드..."
            docker-compose build frontend
          fi
          
          if echo "$CHANGED_FILES" | grep -q "aiserver/"; then
            echo "📦 AI서버 리빌드..."
            docker-compose build aiserver
          fi
          
          # 인프라 변경시에만 전체 리빌드
          if echo "$CHANGED_FILES" | grep -qE "(docker-compose|Dockerfile|nginx)"; then
            echo "📦 전체 리빌드..."
            docker-compose build
          fi

      - name: Start services with health checks
        run: |
          cd ~/behindy
          echo "🚀 서비스 시작..."
          
          # DB와 Redis 병렬 시작
          docker-compose up -d db redis
          
          # PostgreSQL 준비 대기 (스마트 체크)
          wait_for_db() {
            for i in {1..30}; do
              if docker-compose exec -T db pg_isready -U behindy_user >/dev/null 2>&1; then
                echo "✅ DB 준비 완료! ($i초)"
                return 0
              fi
              echo "⏳ DB 대기 중... ($i/30)"
              sleep 1
            done
            return 1
          }
          
          if wait_for_db; then
            # 백엔드 시작
            docker-compose up -d backend
            
            # 백엔드 API 준비 대기
            wait_for_backend() {
              for i in {1..60}; do
                if curl -f http://localhost:8080/actuator/health >/dev/null 2>&1; then
                  echo "✅ 백엔드 준비 완료! ($i초)"
                  return 0
                fi
                echo "⏳ 백엔드 대기 중... ($i/60)"
                sleep 1
              done
              return 1
            }
            
            if wait_for_backend; then
              # 나머지 서비스 병렬 시작
              docker-compose up -d
              echo "✅ 모든 서비스 시작 완료"
            else
              echo "❌ 백엔드 시작 실패"
              exit 1
            fi
          else
            echo "❌ DB 시작 실패"
            exit 1
          fi

      - name: Final health check
        run: |
          echo "🔍 최종 헬스체크..."
          
          # 프론트엔드 준비 대기
          for i in {1..30}; do
            if curl -f http://localhost/ >/dev/null 2>&1; then
              echo "✅ 배포 성공! ($i초)"
              break
            fi
            echo "⏳ 프론트엔드 대기 중... ($i/30)"
            sleep 1
          done

      - name: Status report
        run: |
          cd ~/behindy
          echo "📊 서비스 상태:"
          docker-compose ps
          
          PUBLIC_IP=$(curl -s ifconfig.me 2>/dev/null || echo "서버IP")
          echo "🔗 접속: http://$PUBLIC_IP/"

      - name: Cleanup
        run: |
          docker image prune -f
          docker volume prune -f

      - name: Error logs
        if: failure()
        run: |
          cd ~/behindy
          echo "💥 배포 실패 로그:"
          docker-compose logs --tail=20 backend
          docker-compose logs --tail=20 frontend