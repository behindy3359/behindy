name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Free up disk space
        run: |
          echo "=== 배포 전 디스크 정리 ==="
          df -h
          
          docker system prune -f --volumes
          docker image prune -a -f
          
          sudo apt autoremove -y
          sudo apt autoclean
          
          echo "=== 정리 후 디스크 상태 ==="
          df -h

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Force sync latest code
        run: |
          cd ~/behindy
          git fetch origin
          git reset --hard origin/main
          echo "[+] Force sync complete"

      - name: Stop existing containers
        run: |
          cd ~/behindy
          echo "🛑 기존 컨테이너 중지 중..."
          
          docker-compose down --timeout 30 || true
          
          echo "✅ 컨테이너 중지 완료"

      - name: Clean up old images
        run: |
          cd ~/behindy
          echo "🧹 오래된 이미지 정리 중..."
          
          docker image prune -f
          
          docker images | grep behindy | awk '{print $3}' | xargs -r docker rmi -f || true
          
          echo "✅ 이미지 정리 완료"

      - name: Build and start containers
        run: |
          cd ~/behindy
          echo "🏗️ 컨테이너 빌드 및 시작 중..."
          
          if [ -f .env ]; then
            echo "📋 환경변수 파일 로드 중..."
            set -a
            source .env
            set +a
          else
            echo "⚠️ .env 파일이 없습니다. Docker Compose 기본 설정을 사용합니다."
          fi
          
          echo "📦 프론트엔드 이미지 새로 빌드 중..."
          docker-compose build --no-cache frontend
          
          echo "📦 다른 서비스들 빌드 중..."
          docker-compose build backend llmserver
          
          echo "🚀 모든 서비스 시작 중..."
          docker-compose up -d
          
          echo "✅ 컨테이너 시작 완료"

      - name: Wait for services
        run: |
          echo "⏳ 서비스 시작 대기 중..."
          sleep 30
          
          echo "🔍 컨테이너 상태 확인..."
          cd ~/behindy
          docker-compose ps

      - name: Health check
        run: |
          echo "=== 헬스체크 진행 ==="
          cd ~/behindy
          
          echo "⏳ DB 준비 대기..."
          for i in {1..20}; do
            if docker-compose exec -T postgres pg_isready -U ${DB_USER:-behindy} -d ${DB_NAME:-behindy} >/dev/null 2>&1; then
              echo "✅ DB 준비 완료! ($i/20)"
              break
            fi
            echo "DB 대기 중... ($i/20)"
            sleep 3
          done
          
          echo "⏳ 백엔드 API 대기..."
          for i in {1..30}; do
            if curl -f http://localhost:8080/actuator/health >/dev/null 2>&1; then
              echo "✅ 백엔드 API 준비 완료! ($i/30)"
              break
            fi
            echo "백엔드 대기 중... ($i/30)"
            sleep 2
          done
          
          echo "⏳ 프론트엔드 대기..."
          for i in {1..20}; do
            if curl -f http://localhost:3000/ >/dev/null 2>&1; then
              echo "✅ 프론트엔드 준비 완료! ($i/20)"
              break
            fi
            echo "프론트엔드 대기 중... ($i/20)"
            sleep 2
          done
          
          echo "⏳ 최종 헬스체크..."
          sleep 10
          
          if curl -f http://localhost/ >/dev/null 2>&1; then
            echo "✅ 배포 성공!"
          elif curl -f http://localhost:3000/ >/dev/null 2>&1; then
            echo "✅ 프론트엔드 직접 접근 성공! (Nginx 우회)"
            echo "⚠️  Nginx SSL 설정 확인 필요"
          else
            echo "❌ 배포 실패!"
            echo "=== Nginx 상태 확인 ==="
            docker-compose ps nginx
            echo "=== Nginx 로그 ==="
            docker-compose logs --tail=10 nginx
            exit 1
          fi

      - name: Display service status
        run: |
          cd ~/behindy
          echo "=== 최종 서비스 상태 ==="
          
          echo "📊 컨테이너 상태:"
          docker-compose ps
          
          echo ""
          echo "🔍 서비스 응답 확인:"
          echo -n "백엔드 API: "
          curl -s http://localhost:8080/actuator/health | head -c 50 || echo "응답 없음"
          echo ""
          echo -n "지하철 API: "
          curl -s http://localhost:8080/api/metro/status | head -c 100 || echo "응답 없음"
          echo ""
          echo -n "AI서버: "
          curl -s http://localhost:8000/health | head -c 50 || echo "응답 없음 (정상)"
          
          echo ""
          echo "💾 디스크 사용량:"
          df -h
          
          echo ""
          echo "🐳 Docker 이미지 목록:"
          docker images | head -10
          
          echo ""
          echo "🔗 서비스 접속 정보:"
          PUBLIC_IP=$(curl -s ifconfig.me 2>/dev/null || curl -s ipinfo.io/ip 2>/dev/null || curl -s icanhazip.com 2>/dev/null || echo "서버IP")
          echo "  - 프론트엔드: http://$PUBLIC_IP/"
          echo "  - 백엔드 API: http://$PUBLIC_IP:8080/"
          echo "  - AI 서비스: http://$PUBLIC_IP:8000/"

      - name: Final cleanup
        run: |
          cd ~/behindy
          echo "🧹 최종 정리 작업..."
          
          docker builder prune -f
          docker volume prune -f
          docker network prune -f
          
          echo "=== 최종 디스크 상태 ==="
          df -h
          
          echo "✅ 배포 완료!"

      - name: Notify on failure
        if: failure()
        run: |
          echo "💥 배포 실패 - 로그 정보:"
          echo ""
          echo "=== 컨테이너 상태 ==="
          cd ~/behindy
          docker-compose ps || true
          echo ""
          echo "=== 최근 로그 (postgres) ==="
          docker-compose logs --tail=20 postgres || true
          echo ""
          echo "=== 최근 로그 (backend) ==="  
          docker-compose logs --tail=30 backend || true
          echo ""
          echo "=== 최근 로그 (frontend) ==="
          docker-compose logs --tail=20 frontend || true
          echo ""
          echo "=== 최근 로그 (nginx) ==="
          docker-compose logs --tail=15 nginx || true
          echo ""
          echo "=== 최근 로그 (llmserver) ==="
          docker-compose logs --tail=15 llmserver || true