# Spring Boot ÏÑ§Ï†ï
spring:
  application:
    name: behindy-backend

  profiles:
    active: ${SPRING_PROFILES_ACTIVE:development}

  # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ§Ï†ï
  datasource:
    url: jdbc:postgresql://${DB_URL:localhost:5432/behindy}
    username: ${DB_USER:behindy}
    password: ${DB_PASS:password}
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true

  # Redis ÏÑ§Ï†ï
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      jedis:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

behindy:
  internal:
    api-key: ${INTERNAL_API_KEY:behindy-internal-2025-secret-key}

crypto:
  field-secret-key: ${FIELD_KEY:default_field_key_32_characters_long}
  table-secret-key: ${TABLE_KEY:default_table_key_32_characters_long}

# JWT ÏÑ§Ï†ï
jwt:
  secret: ${JWT_SECRET:default_jwt_secret_key}
  access-validity: ${JWT_ACCESS_VALIDITY:900000}
  refresh-validity: ${JWT_REFRESH_VALIDITY:604800000}

# Ïø†ÌÇ§ ÏÑ§Ï†ï
cookie:
  secure: ${COOKIE_SECURE:false}
  same-site: ${COOKIE_SAME_SITE:strict}

# ÏÑúÏö∏Ïãú ÏßÄÌïòÏ≤† API ÏÑ§Ï†ï
seoul:
  metro:
    api:
      key: ${SEOUL_METRO_API_KEY:test_key}
      base-url: http://swopenAPI.seoul.go.kr/api/subway
      enabled: ${METRO_API_ENABLED:true}
      timeout: 10000
      retry-count: 3
      enabled-lines: ${METRO_ENABLED_LINES:1,2,3,4}
      update-interval: ${METRO_UPDATE_INTERVAL:600000}
    cache:
      ttl: ${SEOUL_METRO_CACHE_TTL:420}
    monitoring:
      daily-limit: ${METRO_DAILY_LIMIT:950}

# AI ÏÑúÎ≤Ñ ÏÑ§Ï†ï
ai:
  server:
    url: ${AI_SERVER_URL:http://localhost:8000}
    enabled: ${AI_SERVER_ENABLED:true}
    timeout: ${AI_SERVER_TIMEOUT:10000}
  # üÜï AI Ïä§ÌÜ†Î¶¨ Î∞∞Ïπò ÏÉùÏÑ± ÏÑ§Ï†ï
  story:
    generation:
      enabled: ${AI_STORY_GENERATION_ENABLED:true}
      daily-limit: ${AI_STORY_DAILY_LIMIT:50}
      batch-size: ${AI_STORY_BATCH_SIZE:5}
      test-interval: ${AI_STORY_TEST_INTERVAL:1800000} # 30Î∂Ñ (Í∞úÎ∞úÏö©)
      min-stories-per-station: ${AI_STORY_MIN_PER_STATION:2}
      retry-count: ${AI_STORY_RETRY_COUNT:3}
      generation-delay: ${AI_STORY_GENERATION_DELAY:2000} # ÏÉùÏÑ± Í∞ÑÍ≤© (ms)

# Î°úÍπÖ ÏÑ§Ï†ï
logging:
  level:
    com.example.backend: INFO
    com.example.backend.service.AIStoryScheduler: INFO # AI Ïä§ÌÜ†Î¶¨ Ïä§ÏºÄÏ§ÑÎü¨ Î°úÍ∑∏
    org.springframework.security: WARN
    org.hibernate.SQL: ERROR
    org.hibernate.type.descriptor.sql.BasicBinder: ERROR
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# Actuator ÏÑ§Ï†ï
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized